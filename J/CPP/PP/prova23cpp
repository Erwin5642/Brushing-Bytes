#include <iostream>
#include <cmath>
using namespace std;

class Ponto
{
    double x, y;

public:
    Ponto(double x = 0.0, double y = 0.0) : x(x), y(y) {}

    double getX() const {
        return x;
    }
    double getY() const {
        return y;
    }
    Ponto operator+(Ponto other)
    {
        Ponto ret(x + other.x, y + other.y);
        return ret;
    }
    Ponto operator-(Ponto other)
    {
        Ponto ret(x - other.x, y - other.y);
        return ret;
    }
    bool operator==(Ponto other){
        return x == other.x && y == other.y;
    }
    bool operator!=(Ponto other){
        return !(*this == other);
    }
    Ponto operator++(int){
        Ponto ret(x++, y++);
        return ret;  
    }
    Ponto operator++(){     
        x++;
        y++;
        return *this;
    }
    Ponto operator--(int){
        Ponto ret(x--, y--);
        return ret;      
    }
    Ponto operator--(){
        x--;
        y--;
        return *this;
    }
};

class Polar{
    double r, phi;
    public:
    Polar(double r = 0.0, double phi = 0.0):r(r), phi(phi){
    }
    Polar(const Ponto &other){
        phi = atan2(other.getY(), other.getX());
        r = sqrt((other.getX() * other.getX()) + (other.getY() * other.getY()));
    }
    operator Ponto(){
        Ponto ret(r * cos(phi), r * sin(phi));
        return ret;
    }
};


int main()
{
    Ponto a(1, 1);

    Polar b = a, c(3, 0);

    a = c;

    return 0;
}
